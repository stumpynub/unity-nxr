//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/NXR/Input/NXRActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NXRActionMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NXRActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NXRActionMap"",
    ""maps"": [
        {
            ""name"": ""ControllerLeft"",
            ""id"": ""0a4e3a54-e582-4b2f-a52a-fd41f17fef37"",
            ""actions"": [
                {
                    ""name"": ""Joy"",
                    ""type"": ""Value"",
                    ""id"": ""412dde9a-463b-4eb4-8c23-439572fcdcf9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""1d13db37-83dc-495b-82ad-4997dbc79cf1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerPressed"",
                    ""type"": ""Button"",
                    ""id"": ""6cf897df-cebb-4477-b99b-44c98c64ba3f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerValue"",
                    ""type"": ""Value"",
                    ""id"": ""15f874bc-a587-4028-9884-9346dc2316fc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""6e2d23d6-0d9f-4b32-aecd-e8c533841665"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""31f63b1c-6904-4621-9d81-631319a71455"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""14b5fe11-b6f0-4c63-82af-5dba8ecff698"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPressed"",
                    ""type"": ""Button"",
                    ""id"": ""e8d3b37b-d474-4e84-addb-51bc12088fbf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AXPressed"",
                    ""type"": ""Button"",
                    ""id"": ""3ee9a80c-ecea-4980-a646-11f1a8b1eb33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""58b07e99-b070-4d56-8e12-76bb387997ac"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88af7cb9-3a6b-42f5-ad59-3172ee97f2d3"",
                    ""path"": ""<XRController>{RightHand}/{Menu}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0346f12a-ca4d-4b07-9002-33e6aa0e3194"",
                    ""path"": ""<XRController>{RightHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41d20a6a-8a4c-45bf-9726-1e1c950d58a1"",
                    ""path"": ""<XRController>{LeftHand}/{PointerRotation}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1bb16bd1-bf61-4575-aba7-993e42e9c4ca"",
                    ""path"": ""<XRController>{RightHand}/{SystemButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afa34a97-8acb-4c1b-9605-92e0e483fb54"",
                    ""path"": ""<XRController>{LeftHand}/{PointerPosition}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb03cef9-7221-4948-a635-ecb1c411e710"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69016ca4-4834-4dae-81b8-32de909d3504"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8a564a6-78c5-4ad9-8c31-a9020f62139c"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AXPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ControllerRight"",
            ""id"": ""ff732c88-4781-43db-a6cf-9d43dc2469ba"",
            ""actions"": [
                {
                    ""name"": ""Joy"",
                    ""type"": ""Value"",
                    ""id"": ""693e1f83-6e5b-4dcd-a49f-25377544c2c4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""1ccc5a52-55c5-4836-87e9-ce9f95b7c57d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerPressed"",
                    ""type"": ""Button"",
                    ""id"": ""59d5eec6-2bd8-44d1-a5be-1668ca9c9d82"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerValue"",
                    ""type"": ""Value"",
                    ""id"": ""f040e934-5fe8-4086-950c-e482d03067fc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPressed"",
                    ""type"": ""Button"",
                    ""id"": ""fc28e662-0719-4647-b564-1befc96f2507"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""f754478a-37b2-4504-801d-b5b22588e8f0"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""67682949-78d7-4abe-ada5-e0e2dc1d1cac"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""45104891-6c01-4f0f-b485-0870050bda3e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AXPressed"",
                    ""type"": ""Button"",
                    ""id"": ""0b4822f7-8670-4cbf-8a08-15d4e533e895"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""306b1acf-3dc3-46a0-8927-68eeffc4a214"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""696cee2b-08ac-4178-ba23-ac7beb008ae0"",
                    ""path"": ""<XRController>{RightHand}/{Menu}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4da16b53-8c48-44ea-891a-4ae4a8817106"",
                    ""path"": ""<XRController>{RightHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d9019cb-eaff-4f01-a68c-81c4591463ea"",
                    ""path"": ""<XRController>{RightHand}/{PointerRotation}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38f21494-24a2-4894-9dda-e55edc5d5cf3"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""539b580c-8257-4f35-a731-d4d76dc02558"",
                    ""path"": ""<XRController>{RightHand}/{PointerPosition}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ff6c6f3-c8a3-4d21-b7b1-efec3644eeb3"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88f42cbe-5350-4307-9d35-e9341a09261b"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""828d9795-4207-459a-9d91-17ca20ab549c"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AXPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HMD"",
            ""id"": ""0a39f5f2-856b-457e-8afd-18949f1d1837"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""8ba1fd65-0c79-42c1-8b4e-c47b67d7533c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""58426167-3115-42d7-93db-6e80a125ca8f"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1e0aae01-1df3-49bd-bd99-b3a2a76f8deb"",
                    ""path"": ""<XRHMD>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b984320-a676-4206-8143-1a6f4d74642d"",
                    ""path"": ""<XRHMD>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ControllerLeft
        m_ControllerLeft = asset.FindActionMap("ControllerLeft", throwIfNotFound: true);
        m_ControllerLeft_Joy = m_ControllerLeft.FindAction("Joy", throwIfNotFound: true);
        m_ControllerLeft_Menu = m_ControllerLeft.FindAction("Menu", throwIfNotFound: true);
        m_ControllerLeft_TriggerPressed = m_ControllerLeft.FindAction("TriggerPressed", throwIfNotFound: true);
        m_ControllerLeft_TriggerValue = m_ControllerLeft.FindAction("TriggerValue", throwIfNotFound: true);
        m_ControllerLeft_Position = m_ControllerLeft.FindAction("Position", throwIfNotFound: true);
        m_ControllerLeft_Rotation = m_ControllerLeft.FindAction("Rotation", throwIfNotFound: true);
        m_ControllerLeft_TrackingState = m_ControllerLeft.FindAction("TrackingState", throwIfNotFound: true);
        m_ControllerLeft_GripPressed = m_ControllerLeft.FindAction("GripPressed", throwIfNotFound: true);
        m_ControllerLeft_AXPressed = m_ControllerLeft.FindAction("AXPressed", throwIfNotFound: true);
        // ControllerRight
        m_ControllerRight = asset.FindActionMap("ControllerRight", throwIfNotFound: true);
        m_ControllerRight_Joy = m_ControllerRight.FindAction("Joy", throwIfNotFound: true);
        m_ControllerRight_Menu = m_ControllerRight.FindAction("Menu", throwIfNotFound: true);
        m_ControllerRight_TriggerPressed = m_ControllerRight.FindAction("TriggerPressed", throwIfNotFound: true);
        m_ControllerRight_TriggerValue = m_ControllerRight.FindAction("TriggerValue", throwIfNotFound: true);
        m_ControllerRight_GripPressed = m_ControllerRight.FindAction("GripPressed", throwIfNotFound: true);
        m_ControllerRight_Position = m_ControllerRight.FindAction("Position", throwIfNotFound: true);
        m_ControllerRight_Rotation = m_ControllerRight.FindAction("Rotation", throwIfNotFound: true);
        m_ControllerRight_TrackingState = m_ControllerRight.FindAction("TrackingState", throwIfNotFound: true);
        m_ControllerRight_AXPressed = m_ControllerRight.FindAction("AXPressed", throwIfNotFound: true);
        // HMD
        m_HMD = asset.FindActionMap("HMD", throwIfNotFound: true);
        m_HMD_Position = m_HMD.FindAction("Position", throwIfNotFound: true);
        m_HMD_Rotation = m_HMD.FindAction("Rotation", throwIfNotFound: true);
    }

    ~@NXRActionMap()
    {
        UnityEngine.Debug.Assert(!m_ControllerLeft.enabled, "This will cause a leak and performance issues, NXRActionMap.ControllerLeft.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_ControllerRight.enabled, "This will cause a leak and performance issues, NXRActionMap.ControllerRight.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_HMD.enabled, "This will cause a leak and performance issues, NXRActionMap.HMD.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControllerLeft
    private readonly InputActionMap m_ControllerLeft;
    private List<IControllerLeftActions> m_ControllerLeftActionsCallbackInterfaces = new List<IControllerLeftActions>();
    private readonly InputAction m_ControllerLeft_Joy;
    private readonly InputAction m_ControllerLeft_Menu;
    private readonly InputAction m_ControllerLeft_TriggerPressed;
    private readonly InputAction m_ControllerLeft_TriggerValue;
    private readonly InputAction m_ControllerLeft_Position;
    private readonly InputAction m_ControllerLeft_Rotation;
    private readonly InputAction m_ControllerLeft_TrackingState;
    private readonly InputAction m_ControllerLeft_GripPressed;
    private readonly InputAction m_ControllerLeft_AXPressed;
    public struct ControllerLeftActions
    {
        private @NXRActionMap m_Wrapper;
        public ControllerLeftActions(@NXRActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Joy => m_Wrapper.m_ControllerLeft_Joy;
        public InputAction @Menu => m_Wrapper.m_ControllerLeft_Menu;
        public InputAction @TriggerPressed => m_Wrapper.m_ControllerLeft_TriggerPressed;
        public InputAction @TriggerValue => m_Wrapper.m_ControllerLeft_TriggerValue;
        public InputAction @Position => m_Wrapper.m_ControllerLeft_Position;
        public InputAction @Rotation => m_Wrapper.m_ControllerLeft_Rotation;
        public InputAction @TrackingState => m_Wrapper.m_ControllerLeft_TrackingState;
        public InputAction @GripPressed => m_Wrapper.m_ControllerLeft_GripPressed;
        public InputAction @AXPressed => m_Wrapper.m_ControllerLeft_AXPressed;
        public InputActionMap Get() { return m_Wrapper.m_ControllerLeft; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerLeftActions set) { return set.Get(); }
        public void AddCallbacks(IControllerLeftActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerLeftActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerLeftActionsCallbackInterfaces.Add(instance);
            @Joy.started += instance.OnJoy;
            @Joy.performed += instance.OnJoy;
            @Joy.canceled += instance.OnJoy;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
            @TriggerPressed.started += instance.OnTriggerPressed;
            @TriggerPressed.performed += instance.OnTriggerPressed;
            @TriggerPressed.canceled += instance.OnTriggerPressed;
            @TriggerValue.started += instance.OnTriggerValue;
            @TriggerValue.performed += instance.OnTriggerValue;
            @TriggerValue.canceled += instance.OnTriggerValue;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @GripPressed.started += instance.OnGripPressed;
            @GripPressed.performed += instance.OnGripPressed;
            @GripPressed.canceled += instance.OnGripPressed;
            @AXPressed.started += instance.OnAXPressed;
            @AXPressed.performed += instance.OnAXPressed;
            @AXPressed.canceled += instance.OnAXPressed;
        }

        private void UnregisterCallbacks(IControllerLeftActions instance)
        {
            @Joy.started -= instance.OnJoy;
            @Joy.performed -= instance.OnJoy;
            @Joy.canceled -= instance.OnJoy;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
            @TriggerPressed.started -= instance.OnTriggerPressed;
            @TriggerPressed.performed -= instance.OnTriggerPressed;
            @TriggerPressed.canceled -= instance.OnTriggerPressed;
            @TriggerValue.started -= instance.OnTriggerValue;
            @TriggerValue.performed -= instance.OnTriggerValue;
            @TriggerValue.canceled -= instance.OnTriggerValue;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @GripPressed.started -= instance.OnGripPressed;
            @GripPressed.performed -= instance.OnGripPressed;
            @GripPressed.canceled -= instance.OnGripPressed;
            @AXPressed.started -= instance.OnAXPressed;
            @AXPressed.performed -= instance.OnAXPressed;
            @AXPressed.canceled -= instance.OnAXPressed;
        }

        public void RemoveCallbacks(IControllerLeftActions instance)
        {
            if (m_Wrapper.m_ControllerLeftActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerLeftActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerLeftActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerLeftActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerLeftActions @ControllerLeft => new ControllerLeftActions(this);

    // ControllerRight
    private readonly InputActionMap m_ControllerRight;
    private List<IControllerRightActions> m_ControllerRightActionsCallbackInterfaces = new List<IControllerRightActions>();
    private readonly InputAction m_ControllerRight_Joy;
    private readonly InputAction m_ControllerRight_Menu;
    private readonly InputAction m_ControllerRight_TriggerPressed;
    private readonly InputAction m_ControllerRight_TriggerValue;
    private readonly InputAction m_ControllerRight_GripPressed;
    private readonly InputAction m_ControllerRight_Position;
    private readonly InputAction m_ControllerRight_Rotation;
    private readonly InputAction m_ControllerRight_TrackingState;
    private readonly InputAction m_ControllerRight_AXPressed;
    public struct ControllerRightActions
    {
        private @NXRActionMap m_Wrapper;
        public ControllerRightActions(@NXRActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Joy => m_Wrapper.m_ControllerRight_Joy;
        public InputAction @Menu => m_Wrapper.m_ControllerRight_Menu;
        public InputAction @TriggerPressed => m_Wrapper.m_ControllerRight_TriggerPressed;
        public InputAction @TriggerValue => m_Wrapper.m_ControllerRight_TriggerValue;
        public InputAction @GripPressed => m_Wrapper.m_ControllerRight_GripPressed;
        public InputAction @Position => m_Wrapper.m_ControllerRight_Position;
        public InputAction @Rotation => m_Wrapper.m_ControllerRight_Rotation;
        public InputAction @TrackingState => m_Wrapper.m_ControllerRight_TrackingState;
        public InputAction @AXPressed => m_Wrapper.m_ControllerRight_AXPressed;
        public InputActionMap Get() { return m_Wrapper.m_ControllerRight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerRightActions set) { return set.Get(); }
        public void AddCallbacks(IControllerRightActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerRightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerRightActionsCallbackInterfaces.Add(instance);
            @Joy.started += instance.OnJoy;
            @Joy.performed += instance.OnJoy;
            @Joy.canceled += instance.OnJoy;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
            @TriggerPressed.started += instance.OnTriggerPressed;
            @TriggerPressed.performed += instance.OnTriggerPressed;
            @TriggerPressed.canceled += instance.OnTriggerPressed;
            @TriggerValue.started += instance.OnTriggerValue;
            @TriggerValue.performed += instance.OnTriggerValue;
            @TriggerValue.canceled += instance.OnTriggerValue;
            @GripPressed.started += instance.OnGripPressed;
            @GripPressed.performed += instance.OnGripPressed;
            @GripPressed.canceled += instance.OnGripPressed;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @AXPressed.started += instance.OnAXPressed;
            @AXPressed.performed += instance.OnAXPressed;
            @AXPressed.canceled += instance.OnAXPressed;
        }

        private void UnregisterCallbacks(IControllerRightActions instance)
        {
            @Joy.started -= instance.OnJoy;
            @Joy.performed -= instance.OnJoy;
            @Joy.canceled -= instance.OnJoy;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
            @TriggerPressed.started -= instance.OnTriggerPressed;
            @TriggerPressed.performed -= instance.OnTriggerPressed;
            @TriggerPressed.canceled -= instance.OnTriggerPressed;
            @TriggerValue.started -= instance.OnTriggerValue;
            @TriggerValue.performed -= instance.OnTriggerValue;
            @TriggerValue.canceled -= instance.OnTriggerValue;
            @GripPressed.started -= instance.OnGripPressed;
            @GripPressed.performed -= instance.OnGripPressed;
            @GripPressed.canceled -= instance.OnGripPressed;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @AXPressed.started -= instance.OnAXPressed;
            @AXPressed.performed -= instance.OnAXPressed;
            @AXPressed.canceled -= instance.OnAXPressed;
        }

        public void RemoveCallbacks(IControllerRightActions instance)
        {
            if (m_Wrapper.m_ControllerRightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerRightActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerRightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerRightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerRightActions @ControllerRight => new ControllerRightActions(this);

    // HMD
    private readonly InputActionMap m_HMD;
    private List<IHMDActions> m_HMDActionsCallbackInterfaces = new List<IHMDActions>();
    private readonly InputAction m_HMD_Position;
    private readonly InputAction m_HMD_Rotation;
    public struct HMDActions
    {
        private @NXRActionMap m_Wrapper;
        public HMDActions(@NXRActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_HMD_Position;
        public InputAction @Rotation => m_Wrapper.m_HMD_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_HMD; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HMDActions set) { return set.Get(); }
        public void AddCallbacks(IHMDActions instance)
        {
            if (instance == null || m_Wrapper.m_HMDActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HMDActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(IHMDActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(IHMDActions instance)
        {
            if (m_Wrapper.m_HMDActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHMDActions instance)
        {
            foreach (var item in m_Wrapper.m_HMDActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HMDActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HMDActions @HMD => new HMDActions(this);
    public interface IControllerLeftActions
    {
        void OnJoy(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnTriggerPressed(InputAction.CallbackContext context);
        void OnTriggerValue(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnGripPressed(InputAction.CallbackContext context);
        void OnAXPressed(InputAction.CallbackContext context);
    }
    public interface IControllerRightActions
    {
        void OnJoy(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnTriggerPressed(InputAction.CallbackContext context);
        void OnTriggerValue(InputAction.CallbackContext context);
        void OnGripPressed(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnAXPressed(InputAction.CallbackContext context);
    }
    public interface IHMDActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
}
